#!/bin/bash

# Setup aliases for TestDriven development workflow
# Based on TestDriven tutorial Part 5, Chapter 11 recommendations

echo "🔧 Setting up TestDriven development aliases..."

# Detect shell
if [[ "$SHELL" == *"zsh"* ]]; then
    SHELL_RC="$HOME/.zshrc"
    echo "📝 Detected zsh shell, updating $SHELL_RC"
elif [[ "$SHELL" == *"bash"* ]]; then
    SHELL_RC="$HOME/.bashrc"
    echo "📝 Detected bash shell, updating $SHELL_RC"
else
    echo "⚠️  Unknown shell, defaulting to .bashrc"
    SHELL_RC="$HOME/.bashrc"
fi

# Create backup
if [ -f "$SHELL_RC" ]; then
    cp "$SHELL_RC" "${SHELL_RC}.backup.$(date +%Y%m%d_%H%M%S)"
    echo "📋 Created backup: ${SHELL_RC}.backup.$(date +%Y%m%d_%H%M%S)"
fi

# Add aliases section
echo "" >> "$SHELL_RC"
echo "# TestDriven Development Aliases" >> "$SHELL_RC"
echo "# Generated by setup-aliases.sh on $(date)" >> "$SHELL_RC"
echo "" >> "$SHELL_RC"

# Docker aliases (from tutorial)
echo "# Docker aliases (TestDriven tutorial recommendation)" >> "$SHELL_RC"
echo "alias dc='docker-compose'" >> "$SHELL_RC"
echo "alias dm='docker-machine'" >> "$SHELL_RC"
echo "" >> "$SHELL_RC"

# TestDriven specific aliases
echo "# TestDriven development workflow aliases" >> "$SHELL_RC"
echo "alias td-dev='docker-compose up -d --build'" >> "$SHELL_RC"
echo "alias td-down='docker-compose down'" >> "$SHELL_RC"
echo "alias td-logs='docker-compose logs -f'" >> "$SHELL_RC"
echo "alias td-test='./test-tutorial.sh'" >> "$SHELL_RC"
echo "alias td-db='docker-compose exec backend python manage.py'" >> "$SHELL_RC"
echo "alias td-psql='docker-compose exec db psql -U postgres'" >> "$SHELL_RC"
echo "alias td-shell='docker-compose exec backend /bin/bash'" >> "$SHELL_RC"
echo "" >> "$SHELL_RC"

# Production aliases
echo "# Production deployment aliases" >> "$SHELL_RC"
echo "alias td-prod-deploy='git push origin production'" >> "$SHELL_RC"
echo "alias td-prod-test='./scripts/test-production-e2e.sh'" >> "$SHELL_RC"
echo "alias td-quick-test='./quick-local-test.sh'" >> "$SHELL_RC"
echo "alias td-local-prod='./scripts/test-local-production.sh'" >> "$SHELL_RC"
echo "" >> "$SHELL_RC"

# Testing aliases
echo "# Testing aliases" >> "$SHELL_RC"
echo "alias td-test-server='./test-tutorial.sh server'" >> "$SHELL_RC"
echo "alias td-test-client='./test-tutorial.sh client'" >> "$SHELL_RC"
echo "alias td-test-e2e='./test-tutorial.sh e2e'" >> "$SHELL_RC"
echo "alias td-cypress='./node_modules/.bin/cypress open --config baseUrl=http://localhost:3000'" >> "$SHELL_RC"
echo "" >> "$SHELL_RC"

# Database aliases
echo "# Database management aliases" >> "$SHELL_RC"
echo "alias td-recreate='docker-compose exec backend python manage.py recreate_db'" >> "$SHELL_RC"
echo "alias td-seed='docker-compose exec backend python manage.py seed_db'" >> "$SHELL_RC"
echo "alias td-migrate='docker-compose exec backend python manage.py db upgrade'" >> "$SHELL_RC"
echo "" >> "$SHELL_RC"

# Cleanup aliases
echo "# Cleanup aliases" >> "$SHELL_RC"
echo "alias td-clean='docker-compose down --volumes --remove-orphans'" >> "$SHELL_RC"
echo "alias td-rebuild='docker-compose build --no-cache'" >> "$SHELL_RC"
echo "alias td-prune='docker system prune -f'" >> "$SHELL_RC"
echo "" >> "$SHELL_RC"

echo "✅ Aliases added to $SHELL_RC"
echo ""
echo "📋 Available aliases:"
echo "   dc                 - docker-compose"
echo "   dm                 - docker-machine"
echo "   td-dev             - Start development environment"
echo "   td-down            - Stop all services"
echo "   td-test            - Run all tests"
echo "   td-test-server     - Run backend tests only"
echo "   td-test-client     - Run frontend tests only"
echo "   td-test-e2e        - Run end-to-end tests"
echo "   td-recreate        - Recreate database"
echo "   td-seed            - Seed database with test data"
echo "   td-psql            - Access PostgreSQL database"
echo "   td-prod-deploy     - Deploy to production"
echo "   td-quick-test      - Quick configuration test"
echo ""
echo "🔄 To activate aliases, run:"
echo "   source $SHELL_RC"
echo ""
echo "💡 Or restart your terminal to use the new aliases!"

# Make this script executable
chmod +x "$0"
