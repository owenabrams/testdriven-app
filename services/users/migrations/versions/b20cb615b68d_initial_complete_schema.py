"""Initial complete schema

Revision ID: b20cb615b68d
Revises: 
Create Date: 2025-09-14 19:22:12.848376

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b20cb615b68d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('services',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('endpoint_url', sa.String(length=255), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=128), nullable=False),
    sa.Column('email', sa.String(length=128), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('admin', sa.Boolean(), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('is_super_admin', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('read', sa.Boolean(), nullable=False),
    sa.Column('read_date', sa.DateTime(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('action_url', sa.String(length=500), nullable=True),
    sa.Column('action_data', sa.Text(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('saving_types',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('code', sa.String(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('requires_target', sa.Boolean(), nullable=False),
    sa.Column('allows_withdrawal', sa.Boolean(), nullable=False),
    sa.Column('minimum_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('maximum_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    sa.UniqueConstraint('name')
    )
    op.create_table('savings_groups',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('region', sa.String(length=100), nullable=True),
    sa.Column('district', sa.String(length=100), nullable=False),
    sa.Column('parish', sa.String(length=100), nullable=False),
    sa.Column('village', sa.String(length=100), nullable=False),
    sa.Column('constitution_document_url', sa.String(length=500), nullable=True),
    sa.Column('registration_certificate_url', sa.String(length=500), nullable=True),
    sa.Column('is_registered', sa.Boolean(), nullable=False),
    sa.Column('registration_number', sa.String(length=100), nullable=True),
    sa.Column('registration_date', sa.Date(), nullable=True),
    sa.Column('formation_date', sa.Date(), nullable=False),
    sa.Column('state', sa.String(length=50), nullable=False),
    sa.Column('savings_balance', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('target_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('members_count', sa.Integer(), nullable=False),
    sa.Column('max_members', sa.Integer(), nullable=False),
    sa.Column('chair_member_id', sa.Integer(), nullable=True),
    sa.Column('treasurer_member_id', sa.Integer(), nullable=True),
    sa.Column('secretary_member_id', sa.Integer(), nullable=True),
    sa.Column('meeting_frequency', sa.String(length=50), nullable=False),
    sa.Column('minimum_contribution', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint("state IN ('FORMING', 'ACTIVE', 'MATURE', 'ELIGIBLE_FOR_LOAN', 'LOAN_ACTIVE', 'CLOSED')", name='check_valid_state'),
    sa.CheckConstraint('members_count <= max_members', name='check_member_limit'),
    sa.CheckConstraint('savings_balance >= 0', name='check_positive_balance'),
    sa.ForeignKeyConstraint(['chair_member_id'], ['group_members.id'], name='fk_chair_member', use_alter=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['secretary_member_id'], ['group_members.id'], name='fk_secretary_member', use_alter=True),
    sa.ForeignKeyConstraint(['treasurer_member_id'], ['group_members.id'], name='fk_treasurer_member', use_alter=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('registration_number')
    )
    op.create_table('service_access_requests',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('requested_permissions', sa.String(length=255), nullable=True),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('request_date', sa.DateTime(), nullable=False),
    sa.Column('reviewed_date', sa.DateTime(), nullable=True),
    sa.Column('reviewed_by', sa.Integer(), nullable=True),
    sa.Column('review_notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('service_admins',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('granted_date', sa.DateTime(), nullable=False),
    sa.Column('granted_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'service_id', name='unique_service_admin')
    )
    op.create_table('target_savings_campaigns',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('target_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('target_date', sa.Date(), nullable=False),
    sa.Column('minimum_contribution', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('maximum_contribution', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('is_mandatory', sa.Boolean(), nullable=False),
    sa.Column('requires_group_vote', sa.Boolean(), nullable=False),
    sa.Column('minimum_participation_rate', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('is_global', sa.Boolean(), nullable=False),
    sa.Column('eligible_group_states', sa.String(length=255), nullable=True),
    sa.Column('completion_bonus_rate', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('early_completion_bonus', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('penalty_for_non_participation', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint("status IN ('DRAFT', 'ACTIVE', 'PAUSED', 'COMPLETED', 'CANCELLED')", name='check_valid_campaign_status'),
    sa.CheckConstraint('completion_bonus_rate >= 0 AND completion_bonus_rate <= 100', name='check_valid_bonus_rate'),
    sa.CheckConstraint('minimum_participation_rate >= 0 AND minimum_participation_rate <= 100', name='check_valid_participation_rate'),
    sa.CheckConstraint('target_amount > 0', name='check_positive_campaign_target_amount'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_service_permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('permissions', sa.String(length=255), nullable=True),
    sa.Column('granted_date', sa.DateTime(), nullable=False),
    sa.Column('granted_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'service_id', name='unique_user_service_permission')
    )
    op.create_table('calendar_events',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('event_date', sa.Date(), nullable=False),
    sa.Column('event_time', sa.Time(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('fund_type', sa.String(length=20), nullable=True),
    sa.Column('verification_status', sa.String(length=20), nullable=True),
    sa.Column('member_gender', sa.String(length=10), nullable=True),
    sa.Column('member_role', sa.String(length=20), nullable=True),
    sa.Column('mobile_money_provider', sa.String(length=50), nullable=True),
    sa.Column('reference_id', sa.String(length=100), nullable=True),
    sa.Column('reference_type', sa.String(length=50), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.CheckConstraint('amount >= 0', name='check_non_negative_amount'),
    sa.ForeignKeyConstraint(['group_id'], ['savings_groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('calendar_events', schema=None) as batch_op:
        batch_op.create_index('idx_calendar_event_date', ['event_date'], unique=False)
        batch_op.create_index('idx_calendar_fund_type', ['fund_type'], unique=False)
        batch_op.create_index('idx_calendar_gender', ['member_gender'], unique=False)
        batch_op.create_index('idx_calendar_group_date', ['group_id', 'event_date'], unique=False)
        batch_op.create_index('idx_calendar_role', ['member_role'], unique=False)
        batch_op.create_index('idx_calendar_type_date', ['event_type', 'event_date'], unique=False)

    op.create_table('group_members',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('gender', sa.String(length=10), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('joined_date', sa.Date(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('share_balance', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('total_contributions', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint("gender IN ('M', 'F', 'OTHER')", name='check_valid_gender'),
    sa.CheckConstraint("role IN ('MEMBER', 'OFFICER', 'FOUNDER')", name='check_valid_role'),
    sa.CheckConstraint('share_balance >= 0', name='check_positive_share_balance'),
    sa.CheckConstraint('total_contributions >= 0', name='check_positive_contributions'),
    sa.ForeignKeyConstraint(['group_id'], ['savings_groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('group_id', 'user_id', name='unique_group_membership')
    )
    op.create_table('group_target_campaigns',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('campaign_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('proposed_date', sa.DateTime(), nullable=False),
    sa.Column('voting_deadline', sa.DateTime(), nullable=True),
    sa.Column('decision_date', sa.DateTime(), nullable=True),
    sa.Column('votes_for', sa.Integer(), nullable=False),
    sa.Column('votes_against', sa.Integer(), nullable=False),
    sa.Column('votes_abstain', sa.Integer(), nullable=False),
    sa.Column('voting_participation_rate', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('group_target_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('group_target_date', sa.Date(), nullable=True),
    sa.Column('group_minimum_contribution', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('total_saved', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('participating_members_count', sa.Integer(), nullable=False),
    sa.Column('completion_percentage', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('completion_date', sa.Date(), nullable=True),
    sa.Column('bonus_awarded', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('assigned_by', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint("status IN ('PROPOSED', 'VOTING', 'ACCEPTED', 'REJECTED', 'ACTIVE', 'COMPLETED')", name='check_valid_group_campaign_status'),
    sa.CheckConstraint('completion_percentage >= 0 AND completion_percentage <= 100', name='check_valid_completion_percentage'),
    sa.CheckConstraint('total_saved >= 0', name='check_positive_total_saved'),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['campaign_id'], ['target_savings_campaigns.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['savings_groups.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('campaign_id', 'group_id', name='unique_campaign_group')
    )
    op.create_table('campaign_votes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('group_campaign_id', sa.Integer(), nullable=False),
    sa.Column('member_id', sa.Integer(), nullable=False),
    sa.Column('vote', sa.String(length=20), nullable=False),
    sa.Column('vote_date', sa.DateTime(), nullable=False),
    sa.Column('vote_reason', sa.Text(), nullable=True),
    sa.Column('is_officer_vote', sa.Boolean(), nullable=False),
    sa.Column('vote_weight', sa.Numeric(precision=3, scale=2), nullable=False),
    sa.CheckConstraint("vote IN ('FOR', 'AGAINST', 'ABSTAIN')", name='check_valid_vote'),
    sa.CheckConstraint('vote_weight > 0', name='check_positive_vote_weight'),
    sa.ForeignKeyConstraint(['group_campaign_id'], ['group_target_campaigns.id'], ),
    sa.ForeignKeyConstraint(['member_id'], ['group_members.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('group_campaign_id', 'member_id', name='unique_campaign_vote')
    )
    op.create_table('group_cashbook',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('member_id', sa.Integer(), nullable=True),
    sa.Column('transaction_date', sa.Date(), nullable=False),
    sa.Column('reference_number', sa.String(length=100), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('individual_saving', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('ecd_fund', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('social_fund', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('target_saving', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('fines', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('loan_taken', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('loan_repayment', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('interest_earned', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('individual_balance', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('ecd_balance', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('social_balance', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('target_balance', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('total_balance', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('entry_type', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('approved_by', sa.Integer(), nullable=True),
    sa.Column('approved_date', sa.DateTime(), nullable=True),
    sa.CheckConstraint("entry_type IN ('DEPOSIT', 'WITHDRAWAL', 'LOAN', 'FINE', 'INTEREST', 'TRANSFER')", name='check_valid_entry_type'),
    sa.CheckConstraint("status IN ('ACTIVE', 'REVERSED', 'CORRECTED')", name='check_valid_cashbook_status'),
    sa.CheckConstraint('total_balance >= 0', name='check_positive_total_balance'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['savings_groups.id'], ),
    sa.ForeignKeyConstraint(['member_id'], ['group_members.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group_loans',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('principal', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('term_months', sa.Integer(), nullable=False),
    sa.Column('interest_rate_annual', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('purpose', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('request_date', sa.DateTime(), nullable=False),
    sa.Column('approval_date', sa.DateTime(), nullable=True),
    sa.Column('disbursal_date', sa.DateTime(), nullable=True),
    sa.Column('due_date', sa.Date(), nullable=True),
    sa.Column('outstanding_balance', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('total_repaid', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('requested_by', sa.Integer(), nullable=False),
    sa.Column('approved_by', sa.Integer(), nullable=True),
    sa.Column('officer_approvals', sa.Text(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint("status IN ('PENDING', 'APPROVED', 'DISBURSED', 'PARTIALLY_REPAID', 'CLOSED', 'DEFAULTED')", name='check_valid_loan_status'),
    sa.CheckConstraint('interest_rate_annual >= 0', name='check_valid_interest_rate'),
    sa.CheckConstraint('outstanding_balance >= 0', name='check_positive_outstanding'),
    sa.CheckConstraint('principal > 0', name='check_positive_principal'),
    sa.CheckConstraint('term_months > 0 AND term_months <= 24', name='check_valid_term'),
    sa.CheckConstraint('total_repaid >= 0', name='check_positive_repaid'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['savings_groups.id'], ),
    sa.ForeignKeyConstraint(['requested_by'], ['group_members.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('loan_assessments',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('member_id', sa.Integer(), nullable=False),
    sa.Column('assessment_date', sa.Date(), nullable=False),
    sa.Column('total_savings', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('months_active', sa.Integer(), nullable=False),
    sa.Column('attendance_rate', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('payment_consistency', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('outstanding_fines', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('eligibility_score', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('is_eligible', sa.Boolean(), nullable=False),
    sa.Column('max_loan_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('recommended_term_months', sa.Integer(), nullable=True),
    sa.Column('risk_level', sa.String(length=20), nullable=False),
    sa.Column('risk_factors', sa.Text(), nullable=True),
    sa.Column('assessment_notes', sa.Text(), nullable=True),
    sa.Column('recommendations', sa.Text(), nullable=True),
    sa.Column('valid_until', sa.Date(), nullable=False),
    sa.Column('is_current', sa.Boolean(), nullable=False),
    sa.Column('assessed_by', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint("risk_level IN ('LOW', 'MEDIUM', 'HIGH')", name='check_valid_risk_level'),
    sa.CheckConstraint('attendance_rate >= 0 AND attendance_rate <= 100', name='check_valid_attendance'),
    sa.CheckConstraint('eligibility_score >= 0 AND eligibility_score <= 100', name='check_valid_score'),
    sa.CheckConstraint('max_loan_amount >= 0', name='check_positive_loan_amount'),
    sa.CheckConstraint('payment_consistency >= 0 AND payment_consistency <= 100', name='check_valid_consistency'),
    sa.ForeignKeyConstraint(['assessed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['member_id'], ['group_members.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('meeting_attendance',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('member_id', sa.Integer(), nullable=False),
    sa.Column('meeting_date', sa.Date(), nullable=False),
    sa.Column('meeting_type', sa.String(length=50), nullable=False),
    sa.Column('attended', sa.Boolean(), nullable=False),
    sa.Column('attendance_time', sa.DateTime(), nullable=True),
    sa.Column('excuse_reason', sa.Text(), nullable=True),
    sa.Column('contributed_to_meeting', sa.Boolean(), nullable=False),
    sa.Column('meeting_notes', sa.Text(), nullable=True),
    sa.Column('recorded_by', sa.Integer(), nullable=False),
    sa.Column('recorded_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint("meeting_type IN ('REGULAR', 'SPECIAL', 'ANNUAL')", name='check_valid_meeting_type'),
    sa.ForeignKeyConstraint(['group_id'], ['savings_groups.id'], ),
    sa.ForeignKeyConstraint(['member_id'], ['group_members.id'], ),
    sa.ForeignKeyConstraint(['recorded_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('group_id', 'member_id', 'meeting_date', name='unique_meeting_attendance')
    )
    op.create_table('member_campaign_participations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('group_campaign_id', sa.Integer(), nullable=False),
    sa.Column('member_id', sa.Integer(), nullable=False),
    sa.Column('is_participating', sa.Boolean(), nullable=False),
    sa.Column('participation_date', sa.DateTime(), nullable=True),
    sa.Column('opt_out_date', sa.DateTime(), nullable=True),
    sa.Column('opt_out_reason', sa.Text(), nullable=True),
    sa.Column('personal_target_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('personal_target_date', sa.Date(), nullable=True),
    sa.Column('current_contribution', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('total_contributions', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('contribution_count', sa.Integer(), nullable=False),
    sa.Column('target_achieved', sa.Boolean(), nullable=False),
    sa.Column('achievement_date', sa.Date(), nullable=True),
    sa.Column('bonus_earned', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint('current_contribution >= 0', name='check_positive_current_contribution'),
    sa.CheckConstraint('total_contributions >= 0', name='check_positive_total_contributions'),
    sa.ForeignKeyConstraint(['group_campaign_id'], ['group_target_campaigns.id'], ),
    sa.ForeignKeyConstraint(['member_id'], ['group_members.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('group_campaign_id', 'member_id', name='unique_member_campaign_participation')
    )
    op.create_table('member_fines',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('member_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('reason', sa.Text(), nullable=False),
    sa.Column('fine_type', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('due_date', sa.Date(), nullable=True),
    sa.Column('paid_date', sa.Date(), nullable=True),
    sa.Column('waived_date', sa.Date(), nullable=True),
    sa.Column('waived_reason', sa.Text(), nullable=True),
    sa.Column('imposed_by', sa.Integer(), nullable=False),
    sa.Column('imposed_date', sa.DateTime(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint("fine_type IN ('LATE_ATTENDANCE', 'MISSED_MEETING', 'LATE_PAYMENT', 'OTHER')", name='check_valid_fine_type'),
    sa.CheckConstraint("status IN ('PENDING', 'PAID', 'WAIVED')", name='check_valid_fine_status'),
    sa.CheckConstraint('amount > 0', name='check_positive_fine_amount'),
    sa.ForeignKeyConstraint(['imposed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['member_id'], ['group_members.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('member_savings',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('member_id', sa.Integer(), nullable=False),
    sa.Column('saving_type_id', sa.Integer(), nullable=False),
    sa.Column('current_balance', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('target_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('target_date', sa.Date(), nullable=True),
    sa.Column('target_description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_target_achieved', sa.Boolean(), nullable=False),
    sa.Column('target_achieved_date', sa.Date(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint('current_balance >= 0', name='check_positive_saving_balance'),
    sa.CheckConstraint('target_amount > 0', name='check_positive_target_amount'),
    sa.ForeignKeyConstraint(['member_id'], ['group_members.id'], ),
    sa.ForeignKeyConstraint(['saving_type_id'], ['saving_types.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('member_id', 'saving_type_id', name='unique_member_saving_type')
    )
    op.create_table('group_transactions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('member_id', sa.Integer(), nullable=True),
    sa.Column('loan_id', sa.Integer(), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('member_balance_before', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('member_balance_after', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('group_balance_before', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('group_balance_after', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('idempotency_key', sa.String(length=255), nullable=True),
    sa.Column('processed_by', sa.Integer(), nullable=False),
    sa.Column('processed_date', sa.DateTime(), nullable=False),
    sa.Column('transaction_metadata', sa.Text(), nullable=True),
    sa.CheckConstraint("type IN ('SAVING_CONTRIBUTION', 'WITHDRAWAL', 'LOAN_DISBURSEMENT', 'LOAN_REPAYMENT', 'PENALTY', 'INTEREST')", name='check_valid_transaction_type'),
    sa.CheckConstraint('amount != 0', name='check_non_zero_amount'),
    sa.CheckConstraint('group_balance_after >= 0', name='check_positive_group_balance'),
    sa.ForeignKeyConstraint(['group_id'], ['savings_groups.id'], ),
    sa.ForeignKeyConstraint(['loan_id'], ['group_loans.id'], ),
    sa.ForeignKeyConstraint(['member_id'], ['group_members.id'], ),
    sa.ForeignKeyConstraint(['processed_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('idempotency_key')
    )
    op.create_table('loan_repayment_schedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('loan_id', sa.Integer(), nullable=False),
    sa.Column('installment_number', sa.Integer(), nullable=False),
    sa.Column('due_date', sa.Date(), nullable=False),
    sa.Column('principal_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('interest_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('total_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('amount_paid', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('payment_date', sa.Date(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('days_overdue', sa.Integer(), nullable=False),
    sa.Column('late_fee', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint("status IN ('PENDING', 'PAID', 'OVERDUE', 'PARTIAL')", name='check_valid_repayment_status'),
    sa.CheckConstraint('amount_paid >= 0', name='check_non_negative_payment'),
    sa.CheckConstraint('days_overdue >= 0', name='check_non_negative_overdue'),
    sa.CheckConstraint('interest_amount >= 0', name='check_non_negative_interest'),
    sa.CheckConstraint('principal_amount > 0', name='check_positive_principal'),
    sa.ForeignKeyConstraint(['loan_id'], ['group_loans.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('loan_id', 'installment_number', name='unique_loan_installment')
    )
    op.create_table('saving_transactions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('member_saving_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('transaction_type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('mobile_money_transaction_id', sa.String(length=100), nullable=True),
    sa.Column('mobile_money_provider', sa.String(length=50), nullable=True),
    sa.Column('mobile_money_phone', sa.String(length=20), nullable=True),
    sa.Column('balance_before', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('balance_after', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('verified_by', sa.Integer(), nullable=True),
    sa.Column('verified_date', sa.DateTime(), nullable=True),
    sa.Column('processed_by', sa.Integer(), nullable=False),
    sa.Column('processed_date', sa.DateTime(), nullable=False),
    sa.Column('idempotency_key', sa.String(length=255), nullable=True),
    sa.CheckConstraint("status IN ('PENDING', 'VERIFIED', 'REJECTED')", name='check_valid_saving_status'),
    sa.CheckConstraint("transaction_type IN ('DEPOSIT', 'WITHDRAWAL')", name='check_valid_saving_transaction_type'),
    sa.CheckConstraint('amount > 0', name='check_positive_saving_amount'),
    sa.CheckConstraint('balance_after >= 0', name='check_positive_balance_after'),
    sa.ForeignKeyConstraint(['member_saving_id'], ['member_savings.id'], ),
    sa.ForeignKeyConstraint(['processed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['verified_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('idempotency_key'),
    sa.UniqueConstraint('mobile_money_transaction_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('saving_transactions')
    op.drop_table('loan_repayment_schedule')
    op.drop_table('group_transactions')
    op.drop_table('member_savings')
    op.drop_table('member_fines')
    op.drop_table('member_campaign_participations')
    op.drop_table('meeting_attendance')
    op.drop_table('loan_assessments')
    op.drop_table('group_loans')
    op.drop_table('group_cashbook')
    op.drop_table('campaign_votes')
    op.drop_table('group_target_campaigns')
    op.drop_table('group_members')
    with op.batch_alter_table('calendar_events', schema=None) as batch_op:
        batch_op.drop_index('idx_calendar_type_date')
        batch_op.drop_index('idx_calendar_role')
        batch_op.drop_index('idx_calendar_group_date')
        batch_op.drop_index('idx_calendar_gender')
        batch_op.drop_index('idx_calendar_fund_type')
        batch_op.drop_index('idx_calendar_event_date')

    op.drop_table('calendar_events')
    op.drop_table('user_service_permissions')
    op.drop_table('target_savings_campaigns')
    op.drop_table('service_admins')
    op.drop_table('service_access_requests')
    op.drop_table('savings_groups')
    op.drop_table('saving_types')
    op.drop_table('notifications')
    op.drop_table('users')
    op.drop_table('services')
    # ### end Alembic commands ###
