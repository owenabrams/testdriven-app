name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Code Quality Job
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-quality-${{ hashFiles('services/users/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-buildx-quality-
          ${{ runner.os }}-buildx-

    - name: Build services
      run: |
        docker-compose build users

    - name: Run linting
      run: |
        docker-compose run --rm users python manage.py lint

    - name: Check code formatting
      run: |
        docker-compose run --rm users python manage.py format-check

  # Test Job
  test:
    name: Tests and Coverage
    runs-on: ubuntu-latest
    needs: quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-test-${{ hashFiles('services/users/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-buildx-test-
          ${{ runner.os }}-buildx-quality-
          ${{ runner.os }}-buildx-

    - name: Build and start services
      run: |
        docker-compose up -d --build

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        timeout 60 bash -c 'until docker-compose exec -T users python -c "import sys; sys.exit(0)"; do sleep 2; done'
        docker-compose ps

    - name: Run database setup
      run: |
        docker-compose exec -T users python manage.py recreate_db

    - name: Run tests with coverage
      run: |
        docker-compose exec -T users python manage.py cov

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report
        path: services/users/htmlcov/

    - name: Cleanup
      if: always()
      run: |
        docker-compose down

  # Integration Test Job
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and start all services
      run: |
        docker-compose -f docker-compose.yml up -d --build

    - name: Wait for all services
      run: |
        echo "Waiting for all services to be ready..."
        sleep 20
        docker-compose ps

    - name: Test service connectivity
      run: |
        # Test that nginx is routing correctly
        curl -f http://localhost || exit 1

    - name: Run integration tests
      run: |
        docker-compose exec -T users python manage.py recreate_db
        docker-compose exec -T users python manage.py seed_db
        docker-compose exec -T users python manage.py test

    - name: Cleanup
      if: always()
      run: |
        docker-compose down
