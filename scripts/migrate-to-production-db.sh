#!/bin/bash

# üîÑ Smooth Migration from Testing to Production Database
# This script helps you migrate from free testing database to production

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîÑ Database Migration: Testing ‚Üí Production${NC}"
echo "=============================================="

# Function to show migration options
show_migration_options() {
    echo -e "${YELLOW}üìä Migration Options:${NC}"
    echo ""
    echo "1. üÜì Keep Testing Database (Supabase/ElephantSQL)"
    echo "   ‚úÖ FREE forever"
    echo "   ‚úÖ Perfect for MVP/testing"
    echo "   ‚ö†Ô∏è  Limited storage/features"
    echo ""
    echo "2. üöÄ Upgrade to AWS RDS"
    echo "   ‚úÖ Production-grade"
    echo "   ‚úÖ Auto-scaling"
    echo "   ‚úÖ Automated backups"
    echo "   üí∞ ~$15-25/month"
    echo ""
    echo "3. üåê Upgrade to Supabase Pro"
    echo "   ‚úÖ 8GB database"
    echo "   ‚úÖ Real-time features"
    echo "   ‚úÖ Built-in auth/APIs"
    echo "   üí∞ $25/month"
    echo ""
    echo "4. üêò Upgrade ElephantSQL"
    echo "   ‚úÖ Larger databases"
    echo "   ‚úÖ Better performance"
    echo "   üí∞ $5-20/month"
}

# Function to backup current database
backup_current_database() {
    echo -e "${YELLOW}üíæ Creating backup of current database...${NC}"
    
    if [ -z "$CURRENT_DB_URI" ]; then
        echo "Please provide current database URI:"
        read -p "Current DB URI: " CURRENT_DB_URI
    fi
    
    # Create backup
    BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
    
    echo "Creating backup: $BACKUP_FILE"
    pg_dump "$CURRENT_DB_URI" > "$BACKUP_FILE"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Backup created: $BACKUP_FILE${NC}"
    else
        echo -e "${RED}‚ùå Backup failed${NC}"
        exit 1
    fi
}

# Function to setup new production database
setup_production_database() {
    echo -e "${YELLOW}üóÉÔ∏è Setting up new production database...${NC}"
    
    echo "Please provide new production database URI:"
    read -p "New DB URI: " NEW_DB_URI
    
    # Test connection
    if psql "$NEW_DB_URI" -c "SELECT version();" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Connection to new database successful${NC}"
    else
        echo -e "${RED}‚ùå Cannot connect to new database${NC}"
        exit 1
    fi
}

# Function to migrate data
migrate_data() {
    echo -e "${YELLOW}üîÑ Migrating data...${NC}"
    
    if [ ! -f "$BACKUP_FILE" ]; then
        echo -e "${RED}‚ùå Backup file not found${NC}"
        exit 1
    fi
    
    echo "Restoring data to new database..."
    psql "$NEW_DB_URI" < "$BACKUP_FILE"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Data migration successful${NC}"
    else
        echo -e "${RED}‚ùå Data migration failed${NC}"
        exit 1
    fi
}

# Function to update GitHub secrets
update_github_secrets() {
    echo -e "${YELLOW}üîê Update GitHub Actions secrets...${NC}"
    echo ""
    echo -e "${BLUE}üìã Update this secret in GitHub Actions:${NC}"
    echo "Secret Name: AWS_RDS_URI"
    echo "Old Value: $CURRENT_DB_URI"
    echo "New Value: $NEW_DB_URI"
    echo ""
    echo -e "${BLUE}üîó GitHub Secrets: https://github.com/owenabrams/testdriven-app/settings/secrets/actions${NC}"
    echo ""
    read -p "Press Enter after updating the secret..."
}

# Function to test deployment
test_deployment() {
    echo -e "${YELLOW}üß™ Testing deployment with new database...${NC}"
    
    echo "Triggering new deployment..."
    echo "Watch the logs for:"
    echo "  ‚úÖ Database connection successful"
    echo "  ‚úÖ Backend service running"
    echo "  ‚úÖ All tests passing"
    echo ""
    echo -e "${BLUE}üîó GitHub Actions: https://github.com/owenabrams/testdriven-app/actions${NC}"
}

# Function for zero-downtime migration
zero_downtime_migration() {
    echo -e "${YELLOW}‚ö° Zero-Downtime Migration Process:${NC}"
    echo ""
    echo "1. üíæ Backup current database"
    echo "2. üóÉÔ∏è Setup new production database"
    echo "3. üîÑ Migrate data"
    echo "4. üîê Update GitHub secrets"
    echo "5. üöÄ Deploy with new database"
    echo "6. ‚úÖ Verify everything works"
    echo "7. üßπ Cleanup old resources"
    echo ""
    
    read -p "Start zero-downtime migration? (y/n): " confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        backup_current_database
        setup_production_database
        migrate_data
        update_github_secrets
        test_deployment
        
        echo ""
        echo -e "${GREEN}üéâ Migration Complete!${NC}"
        echo "Your app is now running on the new production database"
    fi
}

# Function for gradual migration
gradual_migration() {
    echo -e "${YELLOW}üêå Gradual Migration Process:${NC}"
    echo ""
    echo "This approach lets you test thoroughly before switching:"
    echo ""
    echo "1. üóÉÔ∏è Setup new database alongside current one"
    echo "2. üîÑ Sync data periodically"
    echo "3. üß™ Test with new database in staging"
    echo "4. üöÄ Switch when confident"
    echo ""
    echo "Benefits:"
    echo "  ‚úÖ Lower risk"
    echo "  ‚úÖ Easy rollback"
    echo "  ‚úÖ Thorough testing"
    echo ""
    
    read -p "Setup gradual migration? (y/n): " confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        setup_production_database
        echo ""
        echo -e "${GREEN}‚úÖ New database ready for testing${NC}"
        echo "You can now test with the new database before switching"
    fi
}

# Function to show cost optimization
show_cost_optimization() {
    echo -e "${YELLOW}üí∞ Cost Optimization Tips:${NC}"
    echo ""
    echo "üÜì Stay Free Longer:"
    echo "  ‚Ä¢ Supabase: 500MB free (good for 10k+ users)"
    echo "  ‚Ä¢ ElephantSQL: 20MB free (good for testing)"
    echo "  ‚Ä¢ Use multiple free accounts for different environments"
    echo ""
    echo "üíµ When You Need to Pay:"
    echo "  ‚Ä¢ AWS RDS db.t3.micro: ~$15/month"
    echo "  ‚Ä¢ Supabase Pro: $25/month (includes more features)"
    echo "  ‚Ä¢ ElephantSQL Tiny: $5/month"
    echo ""
    echo "üéØ Recommendation:"
    echo "  ‚Ä¢ Start: Free Supabase"
    echo "  ‚Ä¢ Scale: Supabase Pro (best features)"
    echo "  ‚Ä¢ Enterprise: AWS RDS"
}

# Function to show environment strategy
show_environment_strategy() {
    echo -e "${YELLOW}üèóÔ∏è Multi-Environment Strategy:${NC}"
    echo ""
    echo "Development:"
    echo "  üñ•Ô∏è  Local PostgreSQL"
    echo "  üîß Docker Compose"
    echo ""
    echo "Testing/Staging:"
    echo "  üÜì Supabase Free (500MB)"
    echo "  üöÄ Same ECS deployment"
    echo ""
    echo "Production:"
    echo "  üí™ AWS RDS or Supabase Pro"
    echo "  üîÑ Identical deployment process"
    echo ""
    echo "Benefits:"
    echo "  ‚úÖ Same PostgreSQL everywhere"
    echo "  ‚úÖ Identical deployment scripts"
    echo "  ‚úÖ Easy promotion between environments"
    echo "  ‚úÖ Cost-effective scaling"
}

# Main menu
main_menu() {
    echo -e "${BLUE}What would you like to do?${NC}"
    echo ""
    echo "1. üìä See migration options"
    echo "2. ‚ö° Zero-downtime migration"
    echo "3. üêå Gradual migration"
    echo "4. üí∞ Cost optimization tips"
    echo "5. üèóÔ∏è Environment strategy"
    echo "6. üö™ Exit"
    echo ""
    
    read -p "Choose option (1-6): " choice
    
    case $choice in
        1) show_migration_options ;;
        2) zero_downtime_migration ;;
        3) gradual_migration ;;
        4) show_cost_optimization ;;
        5) show_environment_strategy ;;
        6) exit 0 ;;
        *) echo "Invalid option" ;;
    esac
}

# Main execution
main() {
    show_migration_options
    echo ""
    main_menu
}

# Run the main function
main "$@"
