version: '3.8'

services:
  # Local PostgreSQL (simulates RDS)
  postgres:
    image: postgres:15
    container_name: testdriven-local-postgres
    environment:
      POSTGRES_DB: users_production
      POSTGRES_USER: webapp
      POSTGRES_PASSWORD: 72UWZ5Ez0tbtUqtB
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/users-db/create-databases.sql:/docker-entrypoint-initdb.d/create-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U webapp -d users_production"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Service (Flask API)
  backend:
    build:
      context: ./services/users
      dockerfile: Dockerfile-prod
    container_name: testdriven-backend
    ports:
      - "5000:5000"
    environment:
      - APP_SETTINGS=project.config.ProductionConfig
      - DATABASE_URL=postgresql://webapp:72UWZ5Ez0tbtUqtB@postgres:5432/users_production
      - SECRET_KEY=c88ff1752e1b99f5e36c3dae0ee858799b1a3be7e7abfdef
      - AUTO_SEED_DB=true
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo '🔄 Waiting for database to be ready...' &&
        sleep 8 &&
        echo '📊 Checking production database status...' &&
        python manage.py db-status &&
        echo '🏗️ Running production-ready migration and seeding...' &&
        python manage.py migrate-and-seed &&
        echo '✅ Production database setup complete!' &&
        echo '🚀 Starting production Flask application...' &&
        gunicorn -b 0.0.0.0:5000 manage:app --workers=4 --timeout=120 --access-logfile=- --error-logfile=-
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service (React App)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile-prod
      args:
        - REACT_APP_USERS_SERVICE_URL=http://localhost:5000
    container_name: testdriven-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
