# Docker Compose file for development

services:
  users:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    volumes:
      - './services/users:/usr/src/app'
    expose:
      - 5000
    ports:
      - 5001:5000
    environment:
      - FLASK_ENV=production  # Changed to prevent debug mode and CSP conflicts with React PWA
      - APP_SETTINGS=project.config.DevelopmentConfig
      - DATABASE_URL=postgresql://postgres:postgres@users-db:5432/users_dev
      - DATABASE_TEST_URL=postgresql://postgres:postgres@users-db:5432/users_test
      - SECRET_KEY=my_precious
    depends_on:
      users-db:
        condition: service_healthy

  client:
    build:
      context: ./services/client
      dockerfile: Dockerfile
    volumes:
      - './services/client:/usr/src/app'
      - '/usr/src/app/node_modules'  # Anonymous volume for node_modules
    ports:
      - 3007:3000
    environment:
      - NODE_ENV=development
      - REACT_APP_USERS_SERVICE_URL=${REACT_APP_USERS_SERVICE_URL}
      - CHOKIDAR_USEPOLLING=true  # Enable polling for file watching
    depends_on:
      - users

  users-db:
    image: postgres:15-alpine
    ports:
      - 5435:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=users_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/users/project/db/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d users_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - 80:80
    depends_on:
      - users
      - client

volumes:
  postgres_data: