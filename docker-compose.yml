# üèóÔ∏è DEVELOPMENT ENVIRONMENT DOCKER COMPOSE
# This file is ONLY for local development
# Production/Staging use environment-specific builds via GitHub Actions

services:
  backend:
    build:
      context: ./services/users
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=development
        - BUILD_VERSION=${BUILD_VERSION:-dev-local}
        - BUILD_TIMESTAMP=${BUILD_TIMESTAMP:-$(date +%Y%m%d-%H%M%S)}
    image: testdriven-backend-local:latest
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/testdriven_dev
      - SECRET_KEY=dev-secret-key
      - AUTO_SEED_DB=true
      - ENVIRONMENT=development
    volumes:
      - ./services/users:/usr/src/app
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=development
        - REACT_APP_API_URL=http://localhost:3000
        - BUILD_VERSION=${BUILD_VERSION:-dev-local}
        - BUILD_TIMESTAMP=${BUILD_TIMESTAMP:-$(date +%Y%m%d-%H%M%S)}
    image: testdriven-frontend-local:latest
    ports:
      - "3000:80"
    environment:
      - REACT_APP_USERS_SERVICE_URL=http://localhost:3000
      - REACT_APP_API_URL=http://localhost:3000
      - ENVIRONMENT=development
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=testdriven_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
